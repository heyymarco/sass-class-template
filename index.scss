// development:
// @use "node_modules/@heymarco/sass-selector/index" as selector;
// @use "node_modules/@heymarco/sass-string/index" as string;

// production:
@use "../../../node_modules/@heymarco/sass-selector/index" as selector;
@use "../../../node_modules/@heymarco/sass-string/index" as string;



/// Combines two pars into single one, separated by hypen (-).
/// @param {String} $part-a first part to combine.
/// @param {String} $part-b second part to combine.
/// @return {String} combined partA-partB.
@function part-combine($part-a, $part-b) {
    @if (string.not-empty($part-a)) {
        @if (string.not-empty($part-b)) {
            @return "#{$part-a}-#{$part-b}";
        }
        @else {
            @return $part-a;
        }
    }
    @else {
        @if (string.not-empty($part-b)) {
            @return $part-b;
        }
        @else {
            @return "";
        }
    }
}

/// Creates a prefix of css variable based on the specified prefix.
/// @param {String} $var-prefix the prefix to be applied to css variable.
/// @param {String} $var-prefix-base the base prefix to be applied to css variable.
/// @return {String} a prefix of css variable.
@function make-cssvar($var-prefix, $var-prefix-base) {
    $var-prefix-comb     : part-combine($var-prefix-base, $var-prefix);

    @if (string.not-empty($var-prefix-comb)) {
        @return "--#{$var-prefix-comb}-";
    }
    @else {
        @return "--";
    }
}



/// Declares css variable on the html page.
/// @param {String} $var-root the location of the css variable to declare.
@mixin declare-cssvar($var-root) {
    @if (string.not-empty($var-root)) { @include selector.selector($var-root) {
        @content;
    }}
}



/// Declares the alias-item style.
/// @param {String} $alias the name of the module's alias.
/// @param {String} $item the name of the item.
@mixin alias-of($alias, $item) {
    @include selector.selector(#{$alias}-#{$item}) {
        @content;
    }
}

/// Declares the alias-***any-items*** style.
/// @param {String} $alias the name of the module's alias.
@mixin alias-any($alias) {
    @include selector.selector(#{$alias}-) {
        @content;
    }
}



/// Declares the alias of basic style.
/// @param {String} $alias the name of the module's alias.
@mixin alias-basic($alias) {
    @include selector.selector(#{$alias}--) {
        @content;
    }
}

/// Declares the alias of composite style.
/// @param {String} $alias the name of the module's alias.
@mixin alias($alias) {
    @include selector.selector(#{$alias}) {
        @content;
    }
}



/// Declares the class selector to the css.
/// @param {String} $alias the name of the module's alias.
/// @param {String} $class the name of the module's class -or- "" -or- null.
/// @param {String} $base the name of the module's class' base -or- "" -or- null.
@mixin class($alias, $class: "", $base: "") {
    @if (string.not-empty($base) or string.not-empty($class)) {
        @include selector.unify($base, $class) {
            @extend #{$alias} !optional;
    
            @content;
        }
    }
}